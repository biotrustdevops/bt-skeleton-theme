<header-dropdowns data-scroll-behavior="{{ section.settings.header_scroll_behavior | default: 'default' }}">
{% # Top Bar %}
<div class="header-top-bar bg-bt-blue text-white py-2 text-sm">
  <div class="flex items-center justify-end gap-3 md:gap-6 px-3 md:px-5 md:max-w-7xl md:mx-auto">
    <div class="relative" data-dropdown="customer-support">
      <button class="flex items-center gap-2 hover:opacity-80" data-dropdown-toggle>
        <svg class="w-5 h-5 md:w-4 md:h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"></path>
        </svg>
        <span class="hidden md:inline font-medium">{{ 'header.customer_support' | t | default: 'CUSTOMER SUPPORT' }}</span>
        <svg class="w-6 h-6 transition-transform ml-0.5" data-dropdown-arrow fill="currentColor" viewBox="0 0 24 24">
          <path d="M7 10l5 5 5-5z"></path>
        </svg>
      </button>
      
      {% # Customer Support Dropdown Menu %}
      <div class="absolute right-0 top-full mt-2 w-80 bg-white rounded-lg shadow-xl opacity-0 invisible transition-all duration-200 z-50" data-dropdown-menu>
        <div class="p-4">
          <h3 class="text-lg font-bold text-center text-white bg-bt-blue -m-4 mb-4 p-3 rounded-t-lg">{{ 'header.how_can_we_help' | t | default: 'HOW CAN WE HELP YOU?' }}</h3>
          
          {% # 24/7 Chat Section %}
          <div class="mb-4">
            <div class="flex items-start gap-3">
              <div class="flex-shrink-0">
                <div class="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center">
                  <svg class="w-8 h-8 text-bt-blue" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"></path>
                  </svg>
                </div>
              </div>
              <div class="flex-1">
                <h4 class="font-bold text-green-500 text-sm mb-1">{{ 'header.chat_247' | t | default: '24/7 CHAT' }}</h4>
                <p class="text-gray-700 text-xs mb-3">{{ 'header.chat_description' | t | default: 'Get help now from Aidan, your BioTRUST product expert' }}</p>
                <a href="{{ section.settings.chat_link | default: '#' }}" class="inline-block bg-green-500 text-white px-4 py-2 rounded font-bold text-xs hover:bg-green-600 transition-colors">
                  {{ 'header.chat_now' | t | default: 'CHAT NOW' }}
                </a>
              </div>
            </div>
          </div>
          
          {% # Questions Section %}
          <div>
            <div class="flex items-start gap-3">
              <div class="flex-shrink-0">
                <div class="w-16 h-16 bg-green-500 rounded-full flex items-center justify-center text-white text-2xl font-bold">
                  ?
                </div>
              </div>
              <div class="flex-1">
                <h4 class="font-bold text-green-500 text-sm mb-1">{{ 'header.questions' | t | default: 'QUESTIONS?' }}</h4>
                <p class="text-gray-700 text-xs mb-3">{{ 'header.questions_description' | t | default: 'Get answers by visiting the customer help center' }}</p>
                <a href="{{ section.settings.help_center_link | default: '/pages/help' }}" class="inline-block bg-green-500 text-white px-4 py-2 rounded font-bold text-xs hover:bg-green-600 transition-colors">
                  {{ 'header.help_center' | t | default: 'HELP CENTER' }}
                </a>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    {% if shop.customer_accounts_enabled %}
      <div class="relative" data-dropdown="my-account">
        <button class="flex items-center gap-2 hover:opacity-80" data-dropdown-toggle>
          <svg class="w-5 h-5 md:w-4 md:h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
          </svg>
          <span class="hidden md:inline font-medium">{{ 'header.my_account' | t | default: 'MY ACCOUNT' }}</span>
          <svg class="w-6 h-6 transition-transform ml-0.5" data-dropdown-arrow fill="currentColor" viewBox="0 0 24 24">
            <path d="M7 10l5 5 5-5z"></path>
          </svg>
        </button>
        
        {% # My Account Dropdown Menu %}
        <div class="absolute right-0 top-full mt-2 w-56 bg-white border border-gray-200 rounded-md shadow-lg opacity-0 invisible transition-all duration-200 z-50" data-dropdown-menu>
          <div class="py-1">
            <a href="{{ routes.account_url }}/orders" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 transition-colors">
              {{ 'header.purchase_history' | t | default: 'Purchase History' }}
            </a>
            <a href="{{ routes.account_url }}/subscriptions" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 transition-colors">
              {{ 'header.manage_subscriptions' | t | default: 'Manage Subscriptions' }}
            </a>
            <a href="{{ routes.account_url }}/orders" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 transition-colors">
              {{ 'header.track_my_order' | t | default: 'Track My Order' }}
            </a>
            <a href="{{ routes.account_url }}/rewards" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 transition-colors">
              {{ 'header.biotrust_cash' | t | default: 'BioTRUST Cash' }}
            </a>
            <a href="{{ section.settings.help_center_link | default: '/pages/help' }}" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 transition-colors">
              {{ 'header.customer_support_link' | t | default: 'Customer Support' }}
            </a>
            <div class="border-t border-gray-200 my-1"></div>
            <a href="{{ routes.account_logout_url }}" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 transition-colors">
              {{ 'header.log_out' | t | default: 'Log Out' }}
            </a>
          </div>
        </div>
      </div>
    {% endif %}
    
    <a href="{{ routes.cart_url }}" class="flex items-center gap-2 hover:opacity-80 relative">
      <svg class="w-5 h-5 md:w-4 md:h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-2.293 2.293c-.63.63-.184 1.707.707 1.707H17m0 0a2 2 0 100 4 2 2 0 000-4zm-8 2a2 2 0 11-4 0 2 2 0 014 0z"></path>
      </svg>
      <span class="hidden md:inline font-medium">{{ 'header.my_cart' | t | default: 'MY CART' }}</span>
      {% if cart.item_count > 0 %}
        <span class="bg-white text-bt-blue px-2 py-0.5 rounded-full text-xs font-bold md:ml-1">({{ cart.item_count }})</span>
      {% else %}
        <span class="md:inline hidden">(0)</span>
      {% endif %}
    </a>
  </div>
</div>

{% # Main Header %}
<header class="bg-white shadow-sm py-3 md:py-4 relative border-b-[5px] border-bt-blue overflow-visible" 
  {% if section.settings.header_background_image %}
    style="background-image: url('{{ section.settings.header_background_image | image_url: width: 300 }}'); background-repeat: repeat; background-position: top left;"
  {% else %}
    style="background-image: url('https://cdn.shopify.com/s/files/1/2451/8571/files/bg_a71a657f-2566-4a98-a55e-e76b5555861c.webp?v=1730922299'); background-repeat: repeat; background-position: top left;"
  {% endif %}>
  <div class="max-w-7xl mx-auto px-3 md:px-5 flex items-center justify-between gap-2 md:gap-4">
      {% # Mobile Menu Button %}
      <button class="lg:hidden flex items-center p-2 -ml-2" data-mobile-menu-toggle>
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
        </svg>
      </button>

      {% # Logo %}
      <div class="header__logo flex-shrink-0">
        {% if section.settings.logo %}
          <a href="{{ routes.root_url }}" class="block">
            {{ section.settings.logo | image_url: width: 300 | image_tag: 
              loading: 'lazy',
              widths: '100, 150, 300',
              alt: shop.name,
              class: 'h-12 md:h-14 lg:h-16 w-auto'
            }}
          </a>
        {% else %}
          <a href="{{ routes.root_url }}" class="text-2xl font-bold text-bt-blue">
            {{ shop.name }}
          </a>
        {% endif %}
      </div>

      {% # Main Navigation - Hidden on Mobile %}
      <nav class="header__menu hidden lg:flex items-center flex-1">
        {% for link in section.settings.menu.links %}
          {% if link.links != blank %}
            <div class="relative group" data-nav-dropdown="{{ link.title | handleize }}">
              {% if forloop.first %}
                <button class="flex items-center mx-2.5 py-2 text-gray-700 hover:text-bt-blue font-semibold transition-colors whitespace-nowrap" style="font-size: 15px; line-height: 22.5px;" data-nav-toggle>
                  <span class="bg-bt-blue text-white px-2.5 py-1.5 rounded uppercase font-bold inline-flex items-center whitespace-nowrap" style="font-size: 15px; line-height: 22.5px;">
                    {{ link.title }}
                    <svg class="w-6 h-6 text-white ml-1" fill="currentColor" viewBox="0 0 24 24">
                      <path d="M7 10l5 5 5-5z"></path>
                    </svg>
                  </span>
                </button>
              {% else %}
                <button class="block mx-2.5 py-2 text-gray-700 hover:text-bt-blue font-semibold uppercase transition-colors whitespace-nowrap" style="font-size: 15px; line-height: 22.5px;" data-nav-toggle>
                  {{ link.title }}
                </button>
              {% endif %}
              
              {% if forloop.first and section.settings.enable_mega_menu %}
                {% comment %} Mega Menu for Shop {% endcomment %}
                <div class="absolute left-0 top-full mt-1 bg-white border border-gray-200 rounded-lg shadow-xl z-[9999]" data-nav-menu data-mega-menu style="width: 1100px; margin-left: -200px; display: none;">
                  <div class="flex h-full">
                    {% comment %} Categories Column {% endcomment %>
                    <div class="w-80 bg-gray-50 p-8 border-r border-gray-200">
                      <h3 class="text-sm font-bold text-gray-500 uppercase mb-4 tracking-wider">Categories</h3>
                      <ul class="space-y-2">
                        {% liquid
                          for child in link.links
                            echo '<li>'
                            echo '<a href="' | append: child.url | append: '" '
                            echo 'class="block px-3 py-2 text-gray-700 hover:bg-white hover:text-bt-blue rounded transition-all duration-200 mega-menu-link" '
                            assign handle = child.url | split: '/collections/' | last
                            echo 'data-collection-handle="' | append: handle | append: '">'
                            echo child.title
                            echo '</a>'
                            echo '</li>'
                          endfor
                        %}
                      </ul>
                    </div>
                    
                    {% comment %} Products Column {% endcomment %}
                    <div class="flex-1 p-8">
                      <div class="mega-menu-products">
                        <h3 class="text-base font-bold text-gray-600 uppercase mb-6 tracking-wider">Featured Products</h3>
                        <div class="grid grid-cols-3 gap-8" id="mega-menu-products-grid">
                          {% comment %} Show first 6 products from all products collection by default {% endcomment %}
                          {% assign featured_collection = collections['all'] %}
                          {% for product in featured_collection.products limit: 6 %}
                            <div class="mega-menu-product">
                              <a href="{{ product.url }}" class="block group/product">
                                {% if product.featured_image %}
                                  <div class="aspect-square overflow-hidden rounded-lg mb-4 bg-gray-50" style="width: 220px; height: 220px;">
                                    {{ product.featured_image | image_url: width: 440 | image_tag:
                                      loading: 'lazy',
                                      class: 'w-full h-full object-cover group-hover/product:scale-105 transition-transform duration-300',
                                      widths: '220,440',
                                      sizes: '220px'
                                    }}
                                  </div>
                                {% endif %}
                                <h4 class="text-sm font-medium text-gray-900 group-hover/product:text-bt-blue line-clamp-2 text-center">{{ product.title }}</h4>
                              </a>
                            </div>
                          {% endfor %}
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              {% else %}
                {% comment %} Regular Dropdown Menu {% endcomment %}
                <div class="absolute left-0 top-full mt-1 w-56 bg-white border border-gray-200 rounded-md shadow-lg z-[9999]" data-nav-menu style="display: none;">
                  {% for child_link in link.links %}
                    <a href="{{ child_link.url }}" class="block px-4 py-2 text-gray-700 hover:bg-gray-50 hover:text-bt-blue transition-colors">
                      {{ child_link.title }}
                    </a>
                  {% endfor %}
                </div>
              {% endif %}
            </div>
          {% else %}
            <a href="{{ link.url }}" class="mx-2.5 py-2 text-gray-700 hover:text-bt-blue font-semibold uppercase transition-colors whitespace-nowrap" style="font-size: 15px; line-height: 22.5px;">
              {{ link.title }}
            </a>
          {% endif %}
        {% endfor %}
      </nav>

      {% # Search - Desktop Bar, Mobile Icon %}
      <div class="header__search flex-shrink hidden lg:block ml-auto mr-2" style="width: 350px;">
        <form action="{{ routes.search_url }}" class="relative">
          <input 
            type="search" 
            name="q" 
            placeholder="{{ 'header.search_placeholder' | t | default: 'Search all products...' }}"
            class="w-full px-4 py-2.5 pr-10 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-bt-blue focus:border-transparent"
            style="width: 350px;"
          >
          <button type="submit" class="absolute right-2 top-1/2 -translate-y-1/2 text-gray-400 hover:text-gray-600">
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
            </svg>
          </button>
        </form>
      </div>
      
      {% # Mobile Search Icon %}
      <button class="lg:hidden p-2 -mr-2" data-search-toggle>
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
        </svg>
      </button>
  </div>
  
  {% # Mobile Search Bar %}
  <div class="mobile-search-container hidden mt-3" data-mobile-search>
    <form action="{{ routes.search_url }}" class="relative">
      <input 
        type="search" 
        name="q" 
        placeholder="{{ 'header.search_placeholder' | t | default: 'Search all products...' }}"
        class="w-full px-4 py-2 pr-10 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-bt-blue focus:border-transparent"
        data-mobile-search-input
      >
      <button type="submit" class="absolute right-2 top-1/2 -translate-y-1/2 text-gray-400 hover:text-gray-600">
        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
        </svg>
      </button>
    </form>
  </div>
</header>

{% # Mobile Menu Overlay %}
<div class="fixed inset-0 z-50 hidden" data-mobile-menu>
  {% # Backdrop %}
  <div class="fixed inset-0 bg-black bg-opacity-50" data-mobile-menu-backdrop></div>
  
  {% # Menu Panel %}
  <div class="fixed left-0 top-0 h-full w-80 max-w-full bg-white transform -translate-x-full transition-transform duration-300" data-mobile-menu-panel>
    <div class="flex items-center justify-between p-4 border-b">
      <div class="font-bold text-lg">{{ 'header.menu' | t | default: 'Menu' }}</div>
      <button class="p-2 -mr-2" data-mobile-menu-close>
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      </button>
    </div>
    
    <nav class="p-4">
      {% for link in section.settings.menu.links %}
        {% if link.links != blank %}
          <div class="mb-4">
            <div class="font-bold text-bt-blue mb-2">{{ link.title }}</div>
            <div class="pl-4">
              {% for child_link in link.links %}
                <a href="{{ child_link.url }}" class="block py-2 text-gray-700 hover:text-bt-blue">
                  {{ child_link.title }}
                </a>
              {% endfor %}
            </div>
          </div>
        {% else %}
          <a href="{{ link.url }}" class="block py-2 text-gray-700 hover:text-bt-blue font-medium">
            {{ link.title }}
          </a>
        {% endif %}
      {% endfor %}
    </nav>
  </div>
</div>
</header-dropdowns>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    console.log('DOMContentLoaded - initializing dropdowns');
    
    // Find all nav dropdowns
    const navDropdowns = document.querySelectorAll('[data-nav-dropdown]');
    console.log('Found dropdowns:', navDropdowns.length);
    
    navDropdowns.forEach(dropdown => {
      const menu = dropdown.querySelector('[data-nav-menu]');
      const toggle = dropdown.querySelector('[data-nav-toggle]');
      
      if (!menu) {
        console.log('No menu found for dropdown');
        return;
      }
      
      console.log('Setting up dropdown:', dropdown.dataset.navDropdown);
      
      // Fix overflow on parent
      dropdown.style.overflow = 'visible';
      
      // Remove hidden class and set initial state
      menu.classList.remove('hidden');
      menu.style.display = 'none';
      
      // Show on hover
      dropdown.addEventListener('mouseenter', function() {
        // Fix parent overflow
        dropdown.style.overflow = 'visible';
        
        // Remove all hiding classes and styles
        menu.classList.remove('hidden', 'invisible', 'opacity-0');
        menu.style.display = 'block';
        menu.style.visibility = 'visible';
        menu.style.opacity = '1';
        menu.style.zIndex = '99999';
        menu.style.position = 'absolute';
        menu.style.backgroundColor = 'white';
      });
      
      // Hide on mouse leave
      dropdown.addEventListener('mouseleave', function() {
        menu.style.display = 'none';
      });
      
      // Also handle click
      if (toggle) {
        toggle.addEventListener('click', function(e) {
          e.preventDefault();
          e.stopPropagation();
          
          if (menu.style.display === 'none' || menu.style.display === '') {
            // Hide other menus
            navDropdowns.forEach(other => {
              if (other !== dropdown) {
                const otherMenu = other.querySelector('[data-nav-menu]');
                if (otherMenu) otherMenu.style.display = 'none';
              }
            });
            menu.style.display = 'block';
          } else {
            menu.style.display = 'none';
          }
        });
      }
    });
    
    // Close dropdowns when clicking outside
    document.addEventListener('click', function(e) {
      if (!e.target.closest('[data-nav-dropdown]')) {
        navDropdowns.forEach(dropdown => {
          const menu = dropdown.querySelector('[data-nav-menu]');
          if (menu) menu.style.display = 'none';
        });
      }
    });
  });
</script>

{% stylesheet %}
  /* Use Tailwind classes for most styling, keeping minimal custom CSS */
  header-dropdowns {
    display: contents; /* Make wrapper element not interfere with grid */
  }
  
  /* When scroll behavior is enabled, header-dropdowns becomes block */
  header-dropdowns[data-scroll-behavior="show_on_scroll_up"] {
    display: block;
    will-change: transform;
  }
  
  .header-top-bar {
    position: relative;
    z-index: 40;
    grid-column: 1 / -1; /* Full width spanning all columns */
  }
  
  header {
    position: relative;
    z-index: 30;
    /* Center column by default */
  }
  
  /* Navigation dropdown hover states are handled by Tailwind classes */
  
  /* Ensure dropdowns are above other content */
  [data-nav-menu] {
    z-index: 9999 !important;
  }
  
  /* Ensure nav doesn't constrain text */
  .header__menu {
    overflow: visible !important;
  }
  
  /* Ensure dropdowns are properly positioned */
  [data-nav-dropdown] {
    position: relative !important;
  }
  
  /* Fix overflow issues on parent containers */
  header {
    overflow: visible !important;
  }
  
  header .max-w-7xl {
    overflow: visible !important;
  }
  
  .header__menu {
    overflow: visible !important;
  }
  
  header-dropdowns {
    overflow: visible !important;
  }
  
  /* Ensure dropdowns are hidden when header is scrolled */
  header-dropdowns[data-scroll-behavior="show_on_scroll_up"][style*="translateY(-100%)"] [data-dropdown-menu],
  header-dropdowns[data-scroll-behavior="show_on_scroll_up"][style*="translateY(-100%)"] [data-nav-menu] {
    opacity: 0 !important;
    visibility: hidden !important;
  }
  
  /* Dropdown menu transitions */
  .group:hover .group-hover\:opacity-100 {
    transition-delay: 0s;
  }
  
  /* Search input styling */
  .header__search input[type="search"]::-webkit-search-cancel-button {
    -webkit-appearance: none;
  }
  
  /* Dropdown active state */
  [data-dropdown].active [data-dropdown-menu] {
    opacity: 1;
    visibility: visible;
  }
  
  [data-dropdown].active [data-dropdown-arrow] {
    transform: rotate(180deg);
  }
  
  /* Mega Menu Styling */
  [data-mega-menu] {
    max-height: 500px;
    overflow-y: auto;
  }
  
  .mega-menu-link.active {
    background-color: white;
    color: #0066cc;
  }
  
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
{% endstylesheet %}

{% schema %}
{
  "name": "t:general.header",
  "settings": [
    {
      "type": "image_picker",
      "id": "logo",
      "label": "Logo"
    },
    {
      "type": "range",
      "id": "logo_width",
      "min": 50,
      "max": 300,
      "step": 10,
      "unit": "px",
      "label": "Logo width",
      "default": 200
    },
    {
      "type": "link_list",
      "id": "menu",
      "label": "t:labels.menu",
      "default": "main-menu"
    },
    {
      "type": "checkbox",
      "id": "enable_mega_menu",
      "label": "Enable Mega Menu for Shop",
      "default": true,
      "info": "Show mega menu with products for the Shop dropdown"
    },
    {
      "type": "url",
      "id": "chat_link",
      "label": "Chat Link"
    },
    {
      "type": "url",
      "id": "help_center_link",
      "label": "Help Center Link"
    },
    {
      "type": "image_picker",
      "id": "header_background_image",
      "label": "Header Background Image",
      "info": "Background image behind the main menu and logo row. If not set, a default pattern will be used."
    },
    {
      "type": "select",
      "id": "header_scroll_behavior",
      "label": "Header Scroll Behavior",
      "options": [
        {
          "value": "default",
          "label": "Default (Always Visible)"
        },
        {
          "value": "show_on_scroll_up",
          "label": "Show on Scroll Up"
        }
      ],
      "default": "default",
      "info": "Controls how the header behaves when scrolling. 'Show on Scroll Up' hides the header when scrolling down and shows it when scrolling up."
    }
  ]
}
{% endschema %}

{% javascript %}
  console.log('Header JavaScript loading...');
  
  class HeaderDropdowns extends HTMLElement {
    constructor() {
      super();
      console.log('HeaderDropdowns constructor called');
    }
    
    connectedCallback() {
      console.log('HeaderDropdowns connected to DOM');
      
      // Initialize all elements
      this.dropdowns = this.querySelectorAll('[data-dropdown]');
      this.navDropdowns = this.querySelectorAll('[data-nav-dropdown]');
      this.mobileMenuToggle = this.querySelector('[data-mobile-menu-toggle]');
      this.mobileMenu = document.querySelector('[data-mobile-menu]');
      this.mobileMenuPanel = document.querySelector('[data-mobile-menu-panel]');
      this.mobileMenuBackdrop = document.querySelector('[data-mobile-menu-backdrop]');
      this.mobileMenuClose = document.querySelector('[data-mobile-menu-close]');
      this.searchToggle = this.querySelector('[data-search-toggle]');
      this.mobileSearchContainer = this.querySelector('[data-mobile-search]');
      this.mobileSearchInput = this.querySelector('[data-mobile-search-input]');
      
      // Scroll behavior properties
      this.scrollBehavior = this.dataset.scrollBehavior || 'default';
      this.lastScrollTop = 0;
      this.scrollThreshold = 5; // Minimum scroll distance to trigger
      this.headerHeight = this.offsetHeight;
      this.isHeaderHidden = false;
      
      console.log('Found nav dropdowns:', this.navDropdowns.length);
      
      // Initialize after a small delay to ensure DOM is ready
      setTimeout(() => this.init(), 100);
    }
    
    init() {
      console.log('HeaderDropdowns init started');
      console.log('Found nav dropdowns:', this.navDropdowns.length);
      
      // Initialize scroll behavior
      if (this.scrollBehavior === 'show_on_scroll_up') {
        this.initScrollBehavior();
      }
      
      // Initialize mega menu
      this.initMegaMenu();
      
      // Initialize top bar dropdowns
      console.log('Initializing top bar dropdowns:', this.dropdowns.length);
      this.dropdowns.forEach(dropdown => {
        const toggle = dropdown.querySelector('[data-dropdown-toggle]');
        const menu = dropdown.querySelector('[data-dropdown-menu]');
        
        if (!toggle || !menu) return;
        
        // Toggle dropdown on click
        toggle.addEventListener('click', (e) => {
          e.preventDefault();
          e.stopPropagation();
          this.toggleDropdown(dropdown);
        });
        
        // Close dropdown when clicking outside
        document.addEventListener('click', (e) => {
          if (!dropdown.contains(e.target)) {
            this.closeDropdown(dropdown);
          }
        });
        
        // Close dropdown on Escape key
        document.addEventListener('keydown', (e) => {
          if (e.key === 'Escape') {
            this.closeDropdown(dropdown);
          }
        });
      });
      
      // Navigation dropdowns - add both hover and click support
      this.navDropdowns.forEach((dropdown) => {
        const toggle = dropdown.querySelector('[data-nav-toggle]');
        const menu = dropdown.querySelector('[data-nav-menu]');
        
        if (!toggle || !menu) return;
        
        // Remove hidden class if it exists
        menu.classList.remove('hidden');
        
        // Show menu on hover
        dropdown.addEventListener('mouseenter', () => {
          menu.style.display = 'block';
        });
        
        // Hide menu on mouse leave
        dropdown.addEventListener('mouseleave', () => {
          menu.style.display = 'none';
        });
        
        // Toggle on click as fallback
        toggle.addEventListener('click', (e) => {
          e.preventDefault();
          e.stopPropagation();
          
          // Toggle menu visibility
          if (menu.style.display === 'block') {
            menu.style.display = 'none';
          } else {
            // Hide other menus
            this.navDropdowns.forEach(other => {
              if (other !== dropdown) {
                const otherMenu = other.querySelector('[data-nav-menu]');
                if (otherMenu) otherMenu.style.display = 'none';
              }
            });
            menu.style.display = 'block';
          }
        });
        
        // Initially hide the menu
        menu.style.display = 'none';
      });
      
      // Initialize mobile menu
      if (this.mobileMenuToggle && this.mobileMenu) {
        this.mobileMenuToggle.addEventListener('click', () => {
          this.openMobileMenu();
        });
        
        if (this.mobileMenuClose) {
          this.mobileMenuClose.addEventListener('click', () => {
            this.closeMobileMenu();
          });
        }
        
        if (this.mobileMenuBackdrop) {
          this.mobileMenuBackdrop.addEventListener('click', () => {
            this.closeMobileMenu();
          });
        }
      }
      
      // Initialize mobile search
      if (this.searchToggle && this.mobileSearchContainer) {
        this.searchToggle.addEventListener('click', () => {
          this.toggleMobileSearch();
        });
      }
    }
    
    toggleDropdown(dropdown) {
      const isActive = dropdown.classList.contains('active');
      
      // Close all other dropdowns
      this.dropdowns.forEach(d => {
        if (d !== dropdown) {
          this.closeDropdown(d);
        }
      });
      
      // Toggle current dropdown
      if (isActive) {
        this.closeDropdown(dropdown);
      } else {
        this.openDropdown(dropdown);
      }
    }
    
    openDropdown(dropdown) {
      dropdown.classList.add('active');
    }
    
    closeDropdown(dropdown) {
      dropdown.classList.remove('active');
    }
    
    initMegaMenu() {
      const megaMenu = this.querySelector('[data-mega-menu]');
      if (!megaMenu) return;
      
      const megaMenuLinks = megaMenu.querySelectorAll('.mega-menu-link');
      const productsGrid = megaMenu.querySelector('#mega-menu-products-grid');
      
      if (!megaMenuLinks.length || !productsGrid) return;
      
      megaMenuLinks.forEach(link => {
        link.addEventListener('mouseenter', async (e) => {
          e.preventDefault();
          
          // Remove active class from all links
          megaMenuLinks.forEach(l => l.classList.remove('active'));
          // Add active class to current link
          link.classList.add('active');
          
          // Get collection handle
          const collectionHandle = link.dataset.collectionHandle;
          if (!collectionHandle) return;
          
          // Show loading state
          productsGrid.innerHTML = '<div class="col-span-3 text-center py-8 text-gray-500">Loading products...</div>';
          
          try {
            // Fetch products from collection
            const response = await fetch(`/collections/${collectionHandle}/products.json?limit=6`);
            const data = await response.json();
            
            // Clear grid
            productsGrid.innerHTML = '';
            
            // Add products to grid
            if (data.products && data.products.length > 0) {
              data.products.forEach(product => {
                const productHtml = `
                  <div class="mega-menu-product">
                    <a href="/products/${product.handle}" class="block group">
                      ${product.images && product.images[0] ? `
                        <div class="aspect-square overflow-hidden rounded-lg mb-2 bg-gray-100">
                          <img src="${product.images[0].src}&width=200" 
                               alt="${product.title}" 
                               class="w-full h-full object-cover group-hover:scale-105 transition-transform duration-300"
                               loading="lazy">
                        </div>
                      ` : ''}
                      <h4 class="text-sm font-medium text-gray-800 group-hover:text-bt-blue line-clamp-2">${product.title}</h4>
                      <p class="text-sm text-gray-600 mt-1">$${(product.variants[0].price / 100).toFixed(2)}</p>
                    </a>
                  </div>
                `;
                productsGrid.insertAdjacentHTML('beforeend', productHtml);
              });
            } else {
              productsGrid.innerHTML = '<div class="col-span-3 text-center py-8 text-gray-500">No products found in this category</div>';
            }
          } catch (error) {
            console.error('Error loading products:', error);
            productsGrid.innerHTML = '<div class="col-span-3 text-center py-8 text-gray-500">Error loading products</div>';
          }
        });
      });
      
      // Set first category as active by default
      if (megaMenuLinks.length > 0) {
        megaMenuLinks[0].dispatchEvent(new MouseEvent('mouseenter'));
      }
    }
    
    openMobileMenu() {
      if (this.mobileMenu && this.mobileMenuPanel) {
        this.mobileMenu.classList.remove('hidden');
        // Force reflow for animation
        this.mobileMenuPanel.offsetHeight;
        this.mobileMenuPanel.classList.remove('-translate-x-full');
        document.body.style.overflow = 'hidden';
      }
    }
    
    closeMobileMenu() {
      if (this.mobileMenu && this.mobileMenuPanel) {
        this.mobileMenuPanel.classList.add('-translate-x-full');
        setTimeout(() => {
          this.mobileMenu.classList.add('hidden');
        }, 300);
        document.body.style.overflow = '';
      }
    }
    
    toggleMobileSearch() {
      if (this.mobileSearchContainer) {
        this.mobileSearchContainer.classList.toggle('hidden');
        if (!this.mobileSearchContainer.classList.contains('hidden') && this.mobileSearchInput) {
          this.mobileSearchInput.focus();
        }
      }
    }
    
    initScrollBehavior() {
      // Set initial styles for header
      this.style.position = 'fixed';
      this.style.top = '0';
      this.style.left = '0';
      this.style.right = '0';
      this.style.zIndex = '1000';
      this.style.transition = 'transform 0.3s ease-in-out';
      
      // Add a spacer to prevent content jump
      const spacer = document.createElement('div');
      spacer.style.height = this.headerHeight + 'px';
      spacer.className = 'header-spacer';
      this.insertAdjacentElement('afterend', spacer);
      
      // Add scroll event listener
      let ticking = false;
      window.addEventListener('scroll', () => {
        if (!ticking) {
          window.requestAnimationFrame(() => {
            this.handleScroll();
            ticking = false;
          });
          ticking = true;
        }
      });
      
      // Update header height on resize
      window.addEventListener('resize', () => {
        this.headerHeight = this.offsetHeight;
        const existingSpacer = document.querySelector('.header-spacer');
        if (existingSpacer) {
          existingSpacer.style.height = this.headerHeight + 'px';
        }
      });
    }
    
    handleScroll() {
      const currentScrollTop = window.pageYOffset || document.documentElement.scrollTop;
      const scrollDistance = Math.abs(currentScrollTop - this.lastScrollTop);
      
      // Only trigger if scrolled more than threshold
      if (scrollDistance < this.scrollThreshold) {
        return;
      }
      
      if (currentScrollTop > this.lastScrollTop && currentScrollTop > this.headerHeight) {
        // Scrolling down - hide header
        if (!this.isHeaderHidden) {
          this.style.transform = 'translateY(-100%)';
          this.isHeaderHidden = true;
          
          // Close any open dropdowns
          this.dropdowns.forEach(dropdown => {
            this.closeDropdown(dropdown);
          });
          
          // Close nav dropdowns
          this.navDropdowns.forEach(dropdown => {
            dropdown.classList.remove('nav-open');
            const menu = dropdown.querySelector('[data-nav-menu]');
            if (menu) {
              menu.classList.add('hidden');
            }
          });
        }
      } else if (currentScrollTop < this.lastScrollTop) {
        // Scrolling up - show header
        if (this.isHeaderHidden) {
          this.style.transform = 'translateY(0)';
          this.isHeaderHidden = false;
        }
      }
      
      // Update last scroll position
      this.lastScrollTop = currentScrollTop <= 0 ? 0 : currentScrollTop;
    }
  }
  
  customElements.define('header-dropdowns', HeaderDropdowns);
{% endjavascript %}
