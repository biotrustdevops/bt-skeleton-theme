{% comment %}
  Product image viewer with thumbnails, main image, and ebook banner.
  Handles both mobile and desktop layouts.
  
  Usage:
  {% render 'product-image-viewer', product: product %}
  {% render 'product-image-viewer', product: product, mobile_only: true %}
  {% render 'product-image-viewer', product: product, desktop_only: true %}
  
  Parameters:
  - product: Product object (required)
  - mobile_only: Only render mobile layout (optional)
  - desktop_only: Only render desktop layout (optional)
{% endcomment %}

{% stylesheet %}
  /* Star rating half-filled effect */
  .star-half {
    position: relative;
    color: #e5e7eb;
  }
  
  .star-half::before {
    content: '★';
    position: absolute;
    left: 0;
    width: 50%;
    overflow: hidden;
    color: #fbbf24;
  }

  /* Smooth image transitions on mobile */
  @media (max-width: 767px) {
    .zoom-wrap img {
      transition: opacity 0.3s ease-in-out;
    }
    
    .zoom-wrap img.transitioning {
      opacity: 0.7;
    }
  }

  /* Image zoom on hover with pan */
  .zoom-wrap {
    position: relative;
    overflow: hidden;
    cursor: zoom-in;
  }
  
  .zoom-wrap img {
    will-change: transform;
    transform-origin: center center;
  }
  
  .zoom-wrap img.zoom-transition {
    transition: transform .25s ease;
  }
  
  @media (hover: hover) and (pointer: fine) {
    .zoom-wrap:hover img {
      transform: scale(2);
    }
  }

  /* Thumbnail Swiper Custom Styles */
  .thumbnail-swiper {
    width: 102px; /* Increased width to account for borders */
    padding: 0 4px; /* Add padding for border visibility */
  }
  
  .thumbnail-swiper .swiper-wrapper {
    padding: 0 2px; /* Ensure borders aren't clipped */
  }
  
  .thumbnail-swiper .swiper-slide {
    height: auto;
    display: flex;
    justify-content: center;
    opacity: 0;
    transition: opacity 0.4s ease;
  }

  .thumbnail-swiper .swiper-slide.loaded {
    opacity: 1;
  }

  /* Loading skeleton animation */
  .thumbnail-loading {
    width: 94px;
    height: 94px;
    background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
    background-size: 200% 100%;
    border-radius: 4px;
  }

  .swiper-thumb-prev,
  .swiper-thumb-next {
    cursor: pointer;
  }

  .swiper-thumb-prev.swiper-button-disabled,
  .swiper-thumb-next.swiper-button-disabled {
    opacity: 0.35;
    cursor: not-allowed;
  }
{% endstylesheet %}

{% javascript %}
  document.addEventListener('DOMContentLoaded', function() {
    // Initialize Swiper for thumbnails
    const thumbSwiper = new Swiper('.thumbnail-swiper', {
      direction: 'vertical',
      slidesPerGroup: 5,
      slidesPerView: 5,
      spaceBetween: 0,
      centeredSlides: false,
      slideToClickedSlide: true,
      navigation: {
        nextEl: '.swiper-thumb-next',
        prevEl: '.swiper-thumb-prev',
      },
      watchSlidesProgress: true,
      observer: true,
      observeParents: true,
    });

    // Animate thumbnails when images load
    const thumbnailSlides = document.querySelectorAll('.thumbnail-swiper .swiper-slide');
    thumbnailSlides.forEach((slide) => {
      const img = slide.querySelector('img');
      const loadingPlaceholder = slide.querySelector('.thumbnail-loading');
      
      if (img) {
        // Hide loading placeholder and show image with animation
        const showImage = () => {
          if (loadingPlaceholder) {
            loadingPlaceholder.style.display = 'none';
          }
          slide.classList.add('loaded');
        };
        
        // Check if image is already loaded (cached)
        if (img.complete) {
          setTimeout(showImage, 50);
        } else {
          // Add loaded class when image loads
          img.addEventListener('load', showImage);
        }
      }
    });

    // Thumbnail gallery click handling
    const thumbnails = document.querySelectorAll('[data-thumbnail]');
    const mainImages = document.querySelectorAll('[data-main-image]'); // Select ALL main images
    const dots = document.querySelectorAll('[data-carousel-dot]');
    let currentImageIndex = 0;
    
    thumbnails.forEach((thumb, index) => {
      thumb.addEventListener('click', function() {
        // Remove active state from all thumbnails
        thumbnails.forEach(t => {
          t.classList.remove('border-[#0d4f9a]');
          t.classList.add('border-transparent');
        });
        // Add active state to clicked thumbnail
        this.classList.remove('border-transparent');
        this.classList.add('border-[#0d4f9a]');
        // Swap ALL main images (mobile and desktop)
        const imageUrl = this.dataset.image;
        mainImages.forEach(img => {
          if (img) {
            // Remove srcset to ensure src takes priority
            img.removeAttribute('srcset');
            img.removeAttribute('sizes');
            img.src = imageUrl;
          }
        });
        // Update mobile dots if present
        updateDots(index);
      });
    });

    // Mobile carousel dots
    function updateDots(index) {
      currentImageIndex = index;
      dots.forEach((dot, i) => {
        if (i === index) {
          dot.classList.add('bg-[#0d4f9a]');
          dot.classList.remove('bg-gray-300');
        } else {
          dot.classList.remove('bg-[#0d4f9a]');
          dot.classList.add('bg-gray-300');
        }
      });
    }

    function updateMainImage(index) {
      if (dots[index]) {
        const imageUrl = dots[index].dataset.image;
        // Update ALL main images
        mainImages.forEach(img => {
          if (img) {
            // Add transition class for smooth effect on mobile
            if (window.innerWidth < 768) {
              img.classList.add('transitioning');
              setTimeout(() => {
                img.classList.remove('transitioning');
              }, 300);
            }
            // Remove srcset to ensure src takes priority
            img.removeAttribute('srcset');
            img.removeAttribute('sizes');
            img.src = imageUrl;
          }
        });
        updateDots(index);
        // Also update thumbnail selection
        if (thumbnails[index]) {
          thumbnails.forEach(t => {
            t.classList.remove('border-[#0d4f9a]');
            t.classList.add('border-transparent');
          });
          thumbnails[index].classList.remove('border-transparent');
          thumbnails[index].classList.add('border-[#0d4f9a]');
        }
      }
    }

    dots.forEach((dot, index) => {
      dot.addEventListener('click', function() {
        updateMainImage(index);
      });
    });

    // Add touch/swipe support for mobile
    const mobileImageContainer = document.querySelector('.zoom-wrap');
    if (mobileImageContainer && window.innerWidth < 768) {
      let touchStartX = 0;
      let touchEndX = 0;
      let touchStartY = 0;
      let touchEndY = 0;
      const minSwipeDistance = 50; // Minimum distance for a swipe

      mobileImageContainer.addEventListener('touchstart', function(e) {
        touchStartX = e.changedTouches[0].screenX;
        touchStartY = e.changedTouches[0].screenY;
      }, { passive: true });

      mobileImageContainer.addEventListener('touchend', function(e) {
        touchEndX = e.changedTouches[0].screenX;
        touchEndY = e.changedTouches[0].screenY;
        handleSwipe();
      }, { passive: true });

      function handleSwipe() {
        const swipeDistanceX = touchEndX - touchStartX;
        const swipeDistanceY = Math.abs(touchEndY - touchStartY);
        
        // Only process horizontal swipes (ignore vertical scrolling)
        if (Math.abs(swipeDistanceX) > minSwipeDistance && Math.abs(swipeDistanceX) > swipeDistanceY) {
          if (swipeDistanceX > 0) {
            // Swipe right - go to previous image
            if (currentImageIndex > 0) {
              currentImageIndex--;
              updateMainImage(currentImageIndex);
            }
          } else {
            // Swipe left - go to next image
            if (currentImageIndex < dots.length - 1) {
              currentImageIndex++;
              updateMainImage(currentImageIndex);
            }
          }
        }
      }
    }

    // Zoom with pan functionality (desktop only)
    if (window.innerWidth >= 768) {
      const zoomWraps = document.querySelectorAll('.zoom-wrap');
      
      zoomWraps.forEach(wrap => {
        const img = wrap.querySelector('img');
        
        if (img) {
          wrap.addEventListener('mouseenter', function() {
            // Add transition for smooth zoom in
            img.classList.add('zoom-transition');
          });
          
          wrap.addEventListener('mousemove', function(e) {
            const rect = wrap.getBoundingClientRect();
            const x = e.clientX - rect.left;
            const y = e.clientY - rect.top;
            
            // Calculate percentage position
            const xPercent = (x / rect.width) * 100;
            const yPercent = (y / rect.height) * 100;
            
            // Set transform origin based on mouse position
            img.style.transformOrigin = `${xPercent}% ${yPercent}%`;
          });
          
          wrap.addEventListener('mouseleave', function() {
            // Remove transition for instant zoom out
            img.classList.remove('zoom-transition');
            // Reset to center when mouse leaves
            img.style.transformOrigin = 'center center';
          });
        }
      });
    }

  });
{% endjavascript %}

{% unless desktop_only %}
<!-- Mobile: Product Images First -->
<div>
    <!-- Mobile Product Title and Rating -->
    <div class="m-2 mt-4 mb-0 text-center">
      {% render 'variant-servings', product: product %}
      <h1 class="text-xl font-bold uppercase text-[#0d4f9a] leading-tight">{{ product.title }}</h1>
      <div class="flex justify-center items-baseline">
        <div class="flex">
          <span class="text-yellow-400 text-lg">★</span>
          <span class="text-yellow-400 text-lg">★</span>
          <span class="text-yellow-400 text-lg">★</span>
          <span class="text-yellow-400 text-lg">★</span>
          <span class="star-half text-lg">★</span>
        </div>
        <span class="text-[#0d4f9a] text-sm ml-1">217 Reviews</span>
      </div>
    </div>

    <!-- Mobile Main Image -->
    <div class="w-full bg-white flex justify-center items-center">
      {% if product.featured_image %}
        <div class="zoom-wrap">
          {{ product.featured_image | image_url: width: 700 | image_tag: class: 'object-contain max-w-[350px] max-h-[350px]', data-main-image: true, loading: 'lazy', widths: '350,500,700' }}
        </div>
      {% endif %}
    </div>
    
    <!-- Mobile Carousel Dots -->
    <div class="flex flex-col items-center pb-4">
      <div class="flex justify-center gap-2">
        {% for image in product.images limit: 8 %}
          <button 
            data-carousel-dot
            data-image="{{ image | image_url: width: 700 }}"
            class="w-2 h-2 rounded-full {% if forloop.first %}bg-[#0d4f9a]{% else %}bg-gray-300{% endif %} cursor-pointer transition-colors"
          ></button>
        {% endfor %}
      </div>
      {% if product.images.size > 1 %}
        <p class="text-xs text-gray-500 mt-2">Swipe to view more images</p>
      {% endif %}
    </div>
</div>

<!-- eBook Banner (Mobile only) -->
{% if product.metafields["global"]["Free-Ebook-Image"] != blank %}
  <div class="mx-5 mb-4">
    <img src="{{ product.metafields["global"]["Free-Ebook-Image"] }}"
        class="free-ebook-img w-full"
        width="600"
        height="200"
        alt="Receive two free e-books with your order. 'The 3 Week Diet' and '53 Fat Burning Smoothies & Milkshakes' are yours free, a $50 value." />
  </div>
{% endif %}
{% endunless %}

{% unless mobile_only %}
<!-- Desktop: Thumbnails, Main Image, and eBook Banner -->
<div class="flex flex-col">

  <div class="flex flex-col">

    <div class="flex justify-evenly">
      <!-- Thumbnails with Swiper -->
      <div class="flex flex-col justify-center gap-2 w-[110px]">
        <!-- Up Arrow -->
        <button class="swiper-thumb-prev w-full h-8 bg-white border border-gray-300 rounded flex items-center justify-center hover:border-[#0d4f9a] hover:bg-gray-50 transition-colors cursor-pointer">
          <svg class="w-4 h-4 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 15l7-7 7 7" />
          </svg>
        </button>
        
        <!-- Swiper Container -->
        <div class="thumbnail-swiper h-[480px] overflow-hidden">
          <div class="swiper-wrapper">
            {% for image in product.images %}
              <div class="swiper-slide">
                <button 
                  data-thumbnail
                  data-image="{{ image | image_url: width: 700 }}"
                  class="w-[94px] h-[94px] border-2 {% if forloop.first %}border-[#0d4f9a]{% else %}border-transparent{% endif %} cursor-pointer bg-white transition-colors hover:border-gray-400 p-[7px] flex items-center justify-center relative"
                >
                  <div class="thumbnail-loading absolute inset-[7px] animate-pulse"></div>
                  {{ image | image_url: width: 80 | image_tag: class: 'w-auto h-auto max-w-full max-h-full object-contain relative z-10', loading: 'eager' }}
                </button>
              </div>
            {% endfor %}
          </div>
        </div>
        
        <!-- Down Arrow -->
        <button class="swiper-thumb-next w-full h-8 bg-white border border-gray-300 rounded flex items-center justify-center hover:border-[#0d4f9a] hover:bg-gray-50 transition-colors cursor-pointer">
          <svg class="w-4 h-4 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
          </svg>
        </button>
      </div>

      <div class="flex flex-col items-center">
        <div class="flex flex-col items-center mb-2">
          {% render 'variant-servings', product: product %}

          <!-- Title and Rating above both thumbnails and image -->
          <h1 class="text-2xl text-center font-bold uppercase text-[#0d4f9a]">
            {{ product.title }}
          </h1>

          <!-- Rating (Desktop only) -->
          <div class="flex items-center justify-center">
            <div class="flex gap-px">
              <span class="text-yellow-400 text-base">★</span>
              <span class="text-yellow-400 text-base">★</span>
              <span class="text-yellow-400 text-base">★</span>
              <span class="text-yellow-400 text-base">★</span>
              <span class="star-half text-base">★</span>
            </div>
            <span class="text-[#0d4f9a] text-[13px] ml-0.5">217 Reviews</span>
          </div>
        </div>

        <!-- Main Image -->
        {% if product.featured_image %}
          <div class="zoom-wrap w-[450px] h-[450px] flex items-center justify-center">
            {{ product.featured_image | image_url: width: 1100 | image_tag: class: 'object-contain w-full h-full', data-main-image: true, loading: 'lazy', widths: '550,800,1100' }}
          </div>
        {% endif %}

        <!-- eBook Banner (Desktop) -->
        {% if product.metafields["global"]["Free-Ebook-Image"] != blank %}
          <div class="mt-4">
            <img src='{{ product.metafields["global"]["Free-Ebook-Image"] }}'
                class="free-ebook-img w-full max-w-[450px]"
                width="600"
                height="200"
                alt="Receive two free e-books with your order. 'The 3 Week Diet' and '53 Fat Burning Smoothies & Milkshakes' are yours free, a $50 value." />
          </div>
        {% endif %}
      </div>
    </div>
  </div>
</div>
{% endunless %}